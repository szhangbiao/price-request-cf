# Project Rules for AI Interaction

## 目标
- 帮助智能模型理解本项目的结构、数据流、开发习惯和交互约定。
- 优化 AI 代码生成、重构、调试和协作体验。

## 目录结构约定
- `src/components/`：所有 UI 组件，分为 `cards/`（卡片）、`layout/`（布局）、`pages/`（页面）
- `src/routes/`：Hono 路由定义，`index.tsx` 为首页 SSR，`api.tsx` 为 API 路由
- `src/handler/`：业务处理器（如 priceHandler）
- `src/service/`：服务层，负责数据获取、缓存、第三方 API
- `src/types/`：所有 TypeScript 类型定义
- `src/config/`：配置文件（如性能、缓存策略）
- `src/middleware/`：中间件（如性能、缓存、权限）

## SSR & 数据流
- 首页 SSR 采用“缓存优先+骨架屏降级”策略，100ms 内未命中缓存则直接返回骨架屏，前端异步加载数据。
- 价格数据优先从 Redis（Upstash）获取，未命中则查 KV，再未命中才请求 API。
- 组件 Props 类型严格定义，所有数据流均为显式传递。

## 交互与约定
- 所有页面和组件均为 TypeScript + JSX，类型安全优先。
- 组件样式采用 CSS-in-JS 字符串内联，便于 SSR。
- 错误处理分为：数据获取失败（展示 error-message）、接口异常（降级为骨架屏）、全局异常（JSON 错误响应）。
- 日志输出结构化，便于 AI 分析和追踪。

## AI 交互建议
- 优先理解和复用已有组件、类型和服务。
- 生成代码时遵循项目目录和命名规范。
- 优化建议应考虑边缘缓存、SSR 性能和多层降级。
- 代码重构时，优先保证类型安全和缓存一致性。
- 任何涉及 UI 变更的操作，建议同步更新样式和骨架屏。

## 典型问题示例
- 如何新增一个价格卡片？→ 参考 `src/components/cards/`，定义类型、样式和渲染逻辑。
- 如何优化首屏加载？→ 优化 SSR 路由和缓存策略，调整骨架屏和异步加载逻辑。
- 如何扩展 API？→ 在 `src/routes/api.tsx` 新增路由，复用 handler/service 层。

## 其他
- 项目所有配置、约定和最佳实践建议均可在本文件补充和维护。
- 本文件仅供 AI/智能模型参考，不直接参与业务逻辑。